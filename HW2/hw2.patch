diff --git a/block/Kconfig b/block/Kconfig
index 161491d..3c0108f 100644
--- a/block/Kconfig
+++ b/block/Kconfig
@@ -21,7 +21,7 @@ menuconfig BLOCK
 	 Say Y here unless you know you really don't want to mount disks and
 	 suchlike.
 
-if BLOCK
+if BLOCK 
 
 config LBDAF
 	bool "Support for large (2TB+) block devices and files"
@@ -108,9 +108,9 @@ config BLK_CMDLINE_PARSER
 	the kernel boot args.  This is typically of use for embedded devices
 	which don't otherwise have any standardized method for listing the
 	partitions on a block device.
-
 	See Documentation/block/cmdline-partition.txt for more information.
 
+
 menu "Partition Types"
 
 source "block/partitions/Kconfig"
diff --git a/block/Kconfig.iosched b/block/Kconfig.iosched
index 421bef9..7074b5f 100644
--- a/block/Kconfig.iosched
+++ b/block/Kconfig.iosched
@@ -2,6 +2,12 @@ if BLOCK
 
 menu "IO Schedulers"
 
+config IOSCHED_SSTF
+  tristate "C-LOOK IO scheduler" 
+  default y
+  ---help---
+  This is a scheduler which is better than no scheduler.
+
 config IOSCHED_NOOP
 	bool
 	default y
@@ -45,6 +51,9 @@ choice
 	help
 	  Select the I/O scheduler which will be used by default for all
 	  block devices.
+  
+  config DEFAULT_SSTF
+    bool "SSTF" if IOSCHED_SSTF=y
 
 	config DEFAULT_DEADLINE
 		bool "Deadline" if IOSCHED_DEADLINE=y
@@ -62,6 +71,7 @@ config DEFAULT_IOSCHED
 	default "deadline" if DEFAULT_DEADLINE
 	default "cfq" if DEFAULT_CFQ
 	default "noop" if DEFAULT_NOOP
+  default "sstf" if DEFAULT_SSTF
 
 endmenu
 
diff --git a/block/Makefile b/block/Makefile
index 00ecc97..f0d831b 100644
--- a/block/Makefile
+++ b/block/Makefile
@@ -22,4 +22,4 @@ obj-$(CONFIG_IOSCHED_CFQ)	+= cfq-iosched.o
 obj-$(CONFIG_BLOCK_COMPAT)	+= compat_ioctl.o
 obj-$(CONFIG_BLK_CMDLINE_PARSER)	+= cmdline-parser.o
 obj-$(CONFIG_BLK_DEV_INTEGRITY) += bio-integrity.o blk-integrity.o t10-pi.o
-
+obj-$(CONFIG_IOSCHED_SSTF)	+= sstf-iosched.o
diff --git a/block/sstf-iosched.c b/block/sstf-iosched.c
new file mode 100644
index 0000000..158fced
--- /dev/null
+++ b/block/sstf-iosched.c
@@ -0,0 +1,154 @@
+/*
+ * elevator sstf
+  */
+#include <linux/blkdev.h>
+#include <linux/elevator.h>
+#include <linux/bio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+
+/*
+Source:.
+  [1] https://github.com/zainkai/CS444/
+  [2] https://elixir.bootlin.com/linux/v3.19.2
+  [3] https://github.com/CarvellWakeman/cs444
+ */
+
+struct sstf_data {
+	struct list_head queue;
+};
+
+static void sstf_merged_requests(struct request_queue *q, struct request *rq,
+				                         struct request *next)
+{
+	list_del_init(&next->queuelist);
+
+  printk(KERN_INFO "SSTF: Merged a request");
+}
+
+
+/*Takes a request queue q and int force DEPRECATED.
+*it then gets the elevator data and places it in 
+*the sstf struct. if the q is not empty then we creat */
+static int sstf_dispatch(struct request_queue *q, int force)
+{
+	struct sstf_data *sd = q->elevator->elevator_data;
+  char type;
+  struct request *rq;
+
+	if (!list_empty(&sd->queue)) {
+		rq = list_entry(sd->queue.next, struct request, queuelist);
+
+    list_del_init(&rq->queuelist);
+    elv_dispatch_sort(q, rq);
+    
+    type = (rq_data_dir(rq) & REQ_WRITE) ? 'W' : 'R';
+    printk(KERN_INFO, "SSTF: %c at %lu\n", type, blk_rq_pos(rq));
+
+		return 1;
+	}
+	return 0;
+}
+
+//Sort when we are inserting the request rather than at dispatch time.  
+static void sstf_add_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *sd = q->elevator->elevator_data;
+  struct list_head *current_position;
+  
+  list_for_each(current_position, &sd->queue){
+    if(rq_end_sector(rq) < rq_end_sector(list_entry(current_position, struct request, queuelist))){
+      break;
+    }
+  }
+
+  list_add_tail(&rq->queuelist, current_position);
+
+  printk(KERN_INFO "SSTF: %lu\n", blk_rq_pos(rq));
+}
+
+static struct request *
+sstf_former_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *sd = q->elevator->elevator_data;
+
+	if (rq->queuelist.prev == &sd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.prev, struct request, queuelist);
+}
+
+static struct request *
+sstf_latter_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *sd = q->elevator->elevator_data;
+
+	if (rq->queuelist.next == &sd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.next, struct request, queuelist);
+}
+
+static int sstf_init_queue(struct request_queue *q, struct elevator_type *e)
+{
+	struct sstf_data *sd;
+	struct elevator_queue *eq;
+  
+	eq = elevator_alloc(q, e);
+	if (!eq)
+		return -ENOMEM;
+
+	sd = kmalloc_node(sizeof(*sd), GFP_KERNEL, q->node);
+	if (!sd) {
+		kobject_put(&eq->kobj);
+		return -ENOMEM;
+	}
+	eq->elevator_data = sd;
+
+	INIT_LIST_HEAD(&sd->queue);
+
+	spin_lock_irq(q->queue_lock);
+	q->elevator = eq;
+	spin_unlock_irq(q->queue_lock);
+  printk(KERN_DEBUG "Created Queue in SSTF scheduler\n");
+	return 0;
+}
+
+static void sstf_exit_queue(struct elevator_queue *e)
+{
+	struct sstf_data *sd = e->elevator_data;
+
+	BUG_ON(!list_empty(&sd->queue));
+	kfree(sd);
+}
+
+static struct elevator_type elevator_sstf = {
+	.ops = {
+		.elevator_merge_req_fn		= sstf_merged_requests,
+		.elevator_dispatch_fn		= sstf_dispatch,
+		.elevator_add_req_fn		= sstf_add_request,
+		.elevator_former_req_fn		= sstf_former_request,
+		.elevator_latter_req_fn		= sstf_latter_request,
+		.elevator_init_fn		= sstf_init_queue,
+		.elevator_exit_fn		= sstf_exit_queue,
+	},
+	.elevator_name = "sstf",
+	.elevator_owner = THIS_MODULE,
+};
+
+static int __init sstf_init(void)
+{
+	return elv_register(&elevator_sstf);
+}
+
+static void __exit sstf_exit(void)
+{
+	elv_unregister(&elevator_sstf);
+}
+
+module_init(sstf_init);
+module_exit(sstf_exit);
+
+
+MODULE_AUTHOR("Jens Axboe");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("sstf IO scheduler");
diff --git a/core-image-lsb-sdk-qemux86.ext4 b/core-image-lsb-sdk-qemux86.ext4
index 9ea30b8..663cd71 100644
Binary files a/core-image-lsb-sdk-qemux86.ext4 and b/core-image-lsb-sdk-qemux86.ext4 differ
diff --git a/gitlog2latex.sh b/gitlog2latex.sh
new file mode 100644
index 0000000..4a2f064
--- /dev/null
+++ b/gitlog2latex.sh
@@ -0,0 +1,25 @@
+echo "Generating Git commit log..."
+OUTPUT="gitlog.tex"
+git log --reverse --pretty=format:"%an & %ad & %s
+" --date=short > gitlog1.md
+echo "\begin{center}
+\begin{longtabu} to \textwidth {|
+    X[4,l]|
+    X[3,c]|
+    X[8,l]|}
+    \hline
+    \textbf{Author} & \textbf{Date} & \textbf{Message} \\ \hline" > $OUTPUT
+
+awk '{printf "|%s\n",$0}' < gitlog1.md >> gitlog2.md
+pandoc gitlog2.md -o gitlog1.tex
+tr '\n' ' ' < gitlog1.tex > gitlog2.tex
+sed -i -e 's/\\textbar{}/\'$'\n/g' gitlog2.tex
+sed '/^ $/d' gitlog2.tex > gitlog3.tex
+sed '/^$/d' gitlog3.tex > gitlog2.tex
+awk '{printf "%s\\\\ \\hline\n",$0}' < gitlog2.tex >> gitlog2
+sed -i -e 's/\\&/\&/g' gitlog2
+cat gitlog2 >> $OUTPUT
+echo "\end{longtabu}
+\end{center}" >> $OUTPUT
+rm gitlog1* gitlog2* gitlog3*
+echo "Finished generating commit log!"
diff --git a/log b/log
new file mode 100644
index 0000000..5f7a12d
--- /dev/null
+++ b/log
@@ -0,0 +1,5 @@
+commit 89c0eafaf9da57fc130541d358497fe230199107
+Author: Thomas Noelcke <noelcket@oregonstate.edu>
+Date:   Wed Apr 11 16:25:45 2018 -0700
+
+    Added the image to the repo
